/**************************************************************************************************
 GRADLE CONFIG
 *************************************************************************************************/
plugins {
    id 'com.android.application'
    id 'com.google.gms.google-services'
    id 'com.google.firebase.crashlytics'
}


if ((new File(gradle.local)).exists()) {
    apply from: gradle.local
} else {
    apply from: gradle.remote
}

applicationScripts.each {
    apply from: it
}

android {
    // The following are set in the common.gradle file
    compileSdkVersion(compileVersion)
    buildToolsVersion(buildTools)

    defaultConfig {
        applicationId(groupId + tablesName)
        minSdkVersion(minVersion)
        targetSdkVersion(targetVersion)
        versionCode(releaseVersionCode)
        versionName(versionCodeName)

        testApplicationId(groupId + tablesName + testNameSuffix)
        testInstrumentationRunner(instrumentationRunner)
    }

    flavorDimensions "stage", "testing"

    productFlavors {
        demo {
            dimension 'stage'
        }

        master {
            dimension 'stage'
        }

        snapshot {
            dimension 'stage'
        }

        basic {
            dimension 'testing'
        }

        uitest {
            minSdkVersion(uitestMinSDK)
            dimension 'testing'
        }
    }


    signingConfigs {
        release {
            if (shouldSign) {
                storeFile file(signStoreFilePath)
                storePassword signStorePass
                keyAlias signKeyAlias
                keyPassword signKeyPass
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled(minify)
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'

            if (shouldSign) {
                signingConfig signingConfigs.release
            }
        }
        debug {
            debuggable(true)
            testCoverageEnabled(testCoverage) // Allows AndroidTest JaCoCo reports to be generated
        }
    }

    dexOptions {
        javaMaxHeapSize "2g"
    }

    packagingOptions {
        // Pick first occurrence of any files that cause conflicts, as defined in common.gradle
        packageList.each {
            pickFirst it
        }

        exclude('META-INF/maven/com.google.guava/guava/pom.properties')
        exclude('META-INF/maven/com.google.guava/guava/pom.xml')
    }

    compileOptions {
        sourceCompatibility javaVersion
        targetCompatibility javaVersion
    }

    testOptions{
        animationsDisabled = true
    }
}

configurations.all {
    resolutionStrategy {
        cacheDynamicVersionsFor(0, 'seconds')
        cacheChangingModulesFor(0, 'seconds')
    }
}

allprojects {
    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:deprecation" << "-Xlint:unchecked"
    }
}

dependencies {
    implementation 'androidx.annotation:annotation:1.2.0'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.fragment:fragment:1.3.6'
    implementation 'androidx.preference:preference:1.1.1'
    implementation 'androidx.appcompat:appcompat:1.3.1'
    implementation 'androidx.recyclerview:recyclerview:1.2.1'
    implementation 'com.google.android.material:material:1.4.0'
    implementation 'com.github.wbrunette:ProgressWheel:3.4'

    implementation 'com.google.firebase:firebase-analytics:19.0.2'
    implementation 'com.google.firebase:firebase-crashlytics:18.2.3'


    if (libraryProjectPath.exists() && gradle.useLocal) { // Local project is favoured
        implementation project(libraryProjectName)
    } else {
        ///Todo: properly specify all flavour implementations of the androidLibrary
        implementation(group:'org.opendatakit', name: 'androidlibrary_lib', classifier: 'snapshotBasicRelease', version: '1.0.0-+', ext: 'aar')
//        demoImplementation(group: groupId, name: libraryDemoArtifactName, classifier: demoRelease,
//                version: latestVersion, ext: 'aar')
//        masterImplementation(group: groupId, name: libraryMasterArtifactName, classifier: masterRelease,
//                version: masterArtifactVersion, ext: 'aar')
//        snapshotImplementation(group: groupId, name: librarySnapshotArtifactName,
//                classifier: snapshotRelease, version: latestVersion, ext: 'aar')
    }

    if (commonProjectPath.exists() && gradle.useLocal) { // Local project is favoured
        implementation project(commonProjectName)
    } else {        ///Todo: properly specify all flavour implementations of the androidCommon
        implementation(group:'org.opendatakit', name: 'androidcommon', classifier: 'snapshotBasicRelease', version: '1.0.0-+', ext: 'aar')
//        demoImplementation(group: groupId, name: commonDemoArtifactName, classifier: demoRelease,
//                version: latestVersion, ext: 'aar')
//        masterImplementation(group: groupId, name: commonMasterArtifactName, classifier: masterRelease,
//                version: masterArtifactVersion, ext: 'aar')
//        snapshotImplementation(group: groupId, name: commonSnapshotArtifactName,
//                classifier: snapshotRelease, version: latestVersion, ext: 'aar')
    }

    implementation 'com.google.android.gms:play-services-maps:17.0.1'

    //for Espresso
    androidTestUitestImplementation 'androidx.test:runner:1.4.0'
    androidTestUitestImplementation 'androidx.test:rules:1.4.0'
    androidTestUitestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    androidTestUitestImplementation 'androidx.test.espresso:espresso-intents:3.4.0'
    androidTestUitestImplementation 'androidx.test.espresso:espresso-web:3.4.0'
    androidTestUitestImplementation 'androidx.test.espresso:espresso-contrib:3.4.0'
    androidTestUitestImplementation 'androidx.annotation:annotation:1.2.0'

    //for UI Automator
    androidTestUitestImplementation 'androidx.test.uiautomator:uiautomator:2.2.0'
    androidTestUitestImplementation 'org.hamcrest:hamcrest-integration:1.3'
}

task grantPermissionForODKApp {
    dependsOn grantServicesReadExternalStoragePermission
    dependsOn grantServicesWriteExternalStoragePermission
}



