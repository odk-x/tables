/**************************************************************************************************
 GRADLE CONFIG
 *************************************************************************************************/

if ((new File(gradle.local)).exists()) {
    apply from: gradle.local
} else {
    apply from: gradle.remote
}

applicationScripts.each {
    apply from: it
}

apply plugin: 'com.android.application'

android {
    // The following are set in the common.gradle file
    compileSdkVersion(compileVersion)
    buildToolsVersion(buildTools)

    defaultConfig {
        applicationId(groupId + tablesName)
        minSdkVersion(minVersion)
        targetSdkVersion(targetVersion)
        versionCode(releaseVersionCode)
        versionName(versionCodeName)

        testApplicationId(groupId + tablesName + testNameSuffix)
        testInstrumentationRunner(instrumentationRunner)
    }

    productFlavors {
        demo {
        }

        master {
        }

        snapshot {
        }

        uitest {
            minSdkVersion(uitestMinSDK)
        }
    }


    signingConfigs {
        release {
            if (shouldSign) {
                storeFile file(signStoreFilePath)
                storePassword signStorePass
                keyAlias signKeyAlias
                keyPassword signKeyPass
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled(minify)
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'

            if (shouldSign) {
                signingConfig signingConfigs.release
            }
        }
        debug {
            debuggable(true)
            testCoverageEnabled(testCoverage) // Allows AndroidTest JaCoCo reports to be generated
        }
    }

    dexOptions {
        javaMaxHeapSize "2g"
    }

    packagingOptions {
        // Pick first occurrence of any files that cause conflicts, as defined in common.gradle
        packageList.each {
            pickFirst it
        }

        exclude('META-INF/maven/com.google.guava/guava/pom.properties')
        exclude('META-INF/maven/com.google.guava/guava/pom.xml')
    }

    compileOptions {
        sourceCompatibility javaVersion
        targetCompatibility javaVersion
    }
}

configurations.all {
    resolutionStrategy {
        cacheDynamicVersionsFor(0, 'seconds')
        cacheChangingModulesFor(0, 'seconds')
    }
}

allprojects {
    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:deprecation" << "-Xlint:unchecked"
    }
}

dependencies {
    compile fileTree(include: '*.jar', dir: 'libs')
    compile 'com.android.support:support-annotations:25.4.0'
    compile 'com.android.support:support-v13:25.4.0'

    if (libraryProjectPath.exists() && gradle.useLocal) { // Local project is favoured
        compile project(libraryProjectName)
    } else {
        demoCompile(group: groupId, name: libraryDemoArtifactName, classifier: demoRelease,
                version: latestVersion, ext: 'aar')
        masterCompile(group: groupId, name: libraryMasterArtifactName, classifier: masterRelease,
                version: masterArtifactVersion, ext: 'aar')
        snapshotCompile(group: groupId, name: librarySnapshotArtifactName,
                classifier: snapshotRelease, version: latestVersion, ext: 'aar')
        uitestCompile(group: groupId, name: librarySnapshotArtifactName,
                classifier: snapshotRelease, version: latestVersion, ext: 'aar')
    }

    if (commonProjectPath.exists() && gradle.useLocal) { // Local project is favoured
        compile project(commonProjectName)
    } else {
        demoCompile(group: groupId, name: commonDemoArtifactName, classifier: demoRelease,
                version: latestVersion, ext: 'aar')
        masterCompile(group: groupId, name: commonMasterArtifactName, classifier: masterRelease,
                version: masterArtifactVersion, ext: 'aar')
        snapshotCompile(group: groupId, name: commonSnapshotArtifactName,
                classifier: snapshotRelease, version: latestVersion, ext: 'aar')
        uitestCompile(group: groupId, name: commonSnapshotArtifactName,
                classifier: snapshotRelease, version: latestVersion, ext: 'aar')
    }

    compile 'com.google.android.gms:play-services-maps:10.0.1'

//    compile 'com.google.android.gms:play-services:' + gpsVersion

    //for Espresso
    androidTestUitestCompile 'com.android.support.test:runner:1.0.0'
    androidTestUitestCompile 'com.android.support.test:rules:1.0.0'
    androidTestUitestCompile 'com.android.support.test.espresso:espresso-core:3.0.0'
    androidTestUitestCompile 'com.android.support.test.espresso:espresso-intents:3.0.0'
    androidTestUitestCompile 'com.android.support.test.espresso:espresso-web:3.0.0'
    androidTestUitestCompile 'com.android.support:support-annotations:25.4.0'

    //for UI Automator
    androidTestUitestCompile 'com.android.support.test.uiautomator:uiautomator-v18:2.1.2'
    androidTestUitestCompile 'org.hamcrest:hamcrest-integration:1.3'
}

// These are used to disable animations when running UI tests
// and grant services write external storage permission
task grantAnimationPermission(type: Exec, dependsOn: 'installUitestDebug') {
    commandLine "adb shell pm grant org.opendatakit.tables android.permission.SET_ANIMATION_SCALE"
            .split(' ')
}

task grantServicesPermissionRead(type: Exec) {
    commandLine "adb shell pm grant org.opendatakit.services android.permission.READ_EXTERNAL_STORAGE"
            .split(' ')
}

task grantServicesPermissionWrite(type: Exec) {
    commandLine "adb shell pm grant org.opendatakit.services android.permission.WRITE_EXTERNAL_STORAGE"
            .split(' ')
}

tasks.whenTaskAdded { task ->
    if (task.name.startsWith('connected')) {
        task.dependsOn grantServicesPermissionRead
        task.dependsOn grantServicesPermissionWrite
        task.dependsOn grantAnimationPermission
    }
}
